@page "/login"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using _4U.chat.Services
@using Microsoft.AspNetCore.Components.Authorization
@attribute [AllowAnonymous]
@layout Layout.BlankLayout
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Login - 4U.chat</PageTitle>

<div class="login-container">
    <div class="login-form">
        <h2>Sign In</h2>
        
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="success-message">
                @successMessage
            </div>
        }
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }
        
        <form method="post" action="/Auth/Login">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" name="username" id="username" class="form-control" placeholder="Enter your username" required />
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" name="password" id="password" class="form-control" required />
            </div>
            
            <button type="submit" class="btn btn-primary">
                <span>Sign In</span>
            </button>
        </form>
        
        <p class="mt-3">
            Don't have an account? <a href="/register">Sign up</a>
        </p>
    </div>
</div>

@code {
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/", replace: true);
            return;
        }
        
        var uri = new Uri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        
        // Handle success messages
        if (query.TryGetValue("message", out var message))
        {
            successMessage = message.ToString();
        }
        
        // Handle error messages
        if (query.TryGetValue("error", out var error))
        {
            errorMessage = error.ToString();
        }
    }

}