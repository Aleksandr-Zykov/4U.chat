@page "/register"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using _4U.chat.Services
@attribute [AllowAnonymous]
@layout Layout.BlankLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Register - 4U.chat</PageTitle>

<div class="login-container">
    <div class="login-form">
        <h2>Sign Up</h2>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }
        
        <form method="post" action="/Auth/Register">
            <div class="form-group">
                <label for="name">Display Name</label>
                <input type="text" name="name" id="name" class="form-control" placeholder="Your full name" required maxlength="100" />
            </div>
            
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" name="username" id="username" class="form-control" placeholder="Choose a unique username" required maxlength="50" pattern="[a-zA-Z0-9._-]+" title="Only letters, numbers, dots, underscores, and hyphens allowed" />
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" name="password" id="password" class="form-control" required minlength="6" />
            </div>
            
            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" name="confirmPassword" id="confirmPassword" class="form-control" required />
            </div>
            
            <button type="submit" class="btn btn-primary">
                <span>Sign Up</span>
            </button>
        </form>
        
        <p class="mt-3">
            Already have an account? <a href="/login">Sign in</a>
        </p>
    </div>
</div>

@code {
    private string errorMessage = string.Empty;
    
    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        
        // Handle error messages
        if (query.TryGetValue("error", out var error))
        {
            errorMessage = error.ToString();
        }
    }
}